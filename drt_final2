import os
import sys
import traci
import random

if 'SUMO_HOME' in os.environ:
    tools = os.path.join(os.environ['SUMO_HOME'], 'tools')
    sys.path.append(tools)
else:
    sys.exit("SUMO_HOME 환경변수를 설정해주세요.")

class DRTVehicle:
    def __init__(self, vehicle_id):
        self.id = vehicle_id
        self.current_route = []
        self.passengers = []
        self.status = "IDLE"  # IDLE, PICKUP, DROPOFF, RETURN
        self.capacity = 11
        self.current_occupancy = 0
        self.scheduled_stops = []
        self.last_edge = None
        self.active = True

    def can_accept_passengers(self, num_passengers):
        return self.current_occupancy + num_passengers <= self.capacity

class DRTRequest:
    def __init__(self, request_id, origin, destination, num_passengers):
        self.id = request_id
        self.origin = origin
        self.destination = destination
        self.num_passengers = num_passengers
        self.status = "WAITING"  # WAITING, ASSIGNED, ONBOARD, COMPLETED
        self.pickup_time = None
        self.dropoff_time = None
        self.assigned_vehicle = None
        self.assigned_passengers = []  # list of assigned passenger IDs
        self.can_carpool = True  # 합승 가능 여부

class DRTMetrics:
    def __init__(self):
        self.total_wait_time = 0  # 총 대기 시간
        self.total_travel_time = 0  # 총 이동 시간
        self.total_requests = 0  # 총 요청 수
        self.rejected_requests = 0  # 거절된 요청 수
        self.shared_rides = 0  # 합승 횟수
        self.total_direct_distance = 0  # 직선 거리 합
        self.total_actual_distance = 0  # 실제 이동 거리 합
        self.total_empty_distance = 0  # 공차 거리 합
        self.total_vehicle_hours = 0  # 총 차량 운행 시간
        self.total_occupied_hours = 0  # 승객 탑승 시간
        self.total_passengers = 0  # 총 승객 수

    def calculate_metrics(self):
        metrics = {
            "서비스 품질 지표": {
                "평균 대기 시간 (분)": self.total_wait_time / max(self.total_requests, 1) / 60,
                "평균 이동 시간 (분)": self.total_travel_time / max(self.total_requests, 1) / 60,
                "요청 거절률 (%)": (self.rejected_requests / max(self.total_requests, 1)) * 100,
                "합승률 (%)": (self.shared_rides / max(self.total_requests, 1)) * 100,
                "평균 우회도": self.total_actual_distance / max(self.total_direct_distance, 1)
            },
            "운영 효율성 지표": {
                "차량 가동률 (%)": (self.total_occupied_hours / max(self.total_vehicle_hours, 1)) * 100,
                "공차 비율 (%)": (self.total_empty_distance / max(self.total_actual_distance, 1)) * 100,
                "승객 km당 운행 거리": self.total_actual_distance / max(self.total_passengers, 1),
                "평균 탑승률": self.total_passengers / max(self.total_requests, 1)
            }
        }
        return metrics

class DRTSystem:
    def __init__(self):
        
        self.buron_base = "-1006685487"
        self.valid_edges = {
            "부론면": "-1006685487",
            "흥업면": "-1013458887",
            "문막읍": "-1010175240", 
            "소초면": "-1060515905",
            "호저면": "-1021870413"
        }
        self.vehicles = {}
        self.requests = {}
        self.request_counter = 0
        self.completed_requests = []
        self.rejected_requests = []
        self.waiting_requests = []
        self.buron_base = "-1006685487"  # 부론면 기준 도로
        self.metrics = DRTMetrics()

    def calculate_edge_distance(self, edge1, edge2):
        try:
            pos1 = traci.edge.getShape(edge1)[0]  # 엣지의 시작점 좌표
            pos2 = traci.edge.getShape(edge2)[0]
            return ((pos1[0] - pos2[0])**2 + (pos1[1] - pos2[1])**2)**0.5
        except:
            return float('inf')

    def validate_and_find_route(self, origin, destination):
        """경로 탐색"""
        try:
            # 동일 엣지인 경우 해당 엣지만 포함하는 경로 반환
            if origin == destination:
                return traci.simulation.findRoute(origin, destination)

            route = traci.simulation.findRoute(origin, destination)
            if not route.edges:
                return self.find_alternative_route(origin, destination)
            return route
        except traci.exceptions.TraCIException as e:
            print(f"[ERROR] 경로 탐색 오류: {e}")
            return None
    def optimize_stops(self, vehicle, new_request):
        """모든 정류장 순서 최적화"""
        stops = vehicle.scheduled_stops + [(new_request.origin, "PICKUP", new_request.id),
                                         (new_request.destination, "DROPOFF", new_request.id)]
        
        # 픽업/드롭오프 쌍 유지를 위한 제약 설정
        pickup_dropoff_pairs = {}
        for i, (location, action, req_id) in enumerate(stops):
            if action == "PICKUP":
                pickup_dropoff_pairs[req_id] = {"pickup": i}
            else:
                pickup_dropoff_pairs[req_id]["dropoff"] = i
        
        best_order = stops.copy()
        best_distance = float('inf')
        
        def is_valid_order(order):
            current_occupancy = 0
            visited = set()
            
            for _, action, req_id in order:
                if action == "PICKUP":
                    current_occupancy += self.requests[req_id].num_passengers
                    if current_occupancy > 11:  # 최대 승차 인원 초과
                        return False
                else:
                    if req_id not in visited:  # 픽업 전 드롭오프 시도
                        return False
                    current_occupancy -= self.requests[req_id].num_passengers
                
                if action == "PICKUP":
                    visited.add(req_id)
            
            return True
        
        def calculate_route_length(order):
            total_length = 0
            current_edge = traci.vehicle.getRoadID(vehicle.id) or vehicle.last_edge
            
            for location, _, _ in order:
                route = self.validate_and_find_route(current_edge, location)
                if not route or not route.edges:
                    return float('inf')
                total_length += route.length
                current_edge = location
            
            return total_length
        
        # 가능한 모든 순서 조합 시도
        from itertools import permutations
        for perm in permutations(stops):
            if not is_valid_order(perm):
                continue
            
            route_length = calculate_route_length(perm)
            if route_length < best_distance:
                best_distance = route_length
                best_order = list(perm)
        
        return best_order if best_distance != float('inf') else stops
    
    def is_valid_edge(self, edge_id):
        """엣지 ID 유효성 검사"""
        try:
            traci.edge.getLength(edge_id)
            return True
        except:
            return False
    
    def find_alternative_route(self, origin, destination):
        """대체 경로 탐색"""
        try:
            # 부론면을 경유하는 경로 시도
            via_edge = self.buron_base
            route1 = traci.simulation.findRoute(origin, via_edge)
            route2 = traci.simulation.findRoute(via_edge, destination)
            
            if route1.edges and route2.edges:
                complete_route = route1.edges + route2.edges[1:]
                return traci.simulation.findRoute(origin, destination, via=complete_route)
            return None
        except:
            return None

    def add_vehicle(self, vehicle_id):
        try:
            if self.check_vehicle_existence(vehicle_id):
                traci.vehicle.remove(vehicle_id)
            
            # 초기 경로 설정    
            initial_route = [self.buron_base]
            traci.route.add("route_" + vehicle_id, initial_route)
            
            # 차량 추가
            traci.vehicle.add(vehicle_id, "route_" + vehicle_id, typeID="drt_vehicle")
            traci.vehicle.setVehicleClass(vehicle_id, "passenger")
            traci.vehicle.setStop(vehicle_id, self.buron_base, duration=1)
            
            vehicle = DRTVehicle(vehicle_id)
            vehicle.last_edge = self.buron_base
            self.vehicles[vehicle_id] = vehicle
            
            return True
        except Exception as e:
            print(f"차량 추가 실패: {e}")
            return False

    def reset_vehicle(self, vehicle_id):
        """차량 재배치"""
        try:
            if self.check_vehicle_existence(vehicle_id):
                traci.vehicle.remove(vehicle_id)
            
            route_id = f"route_{vehicle_id}"
            initial_route = [self.buron_base]
            if route_id not in traci.route.getIDList():
                traci.route.add(route_id, initial_route)
            
            traci.vehicle.add(vehicle_id, route_id)
            traci.vehicle.setStop(vehicle_id, self.buron_base, duration=1)
            
            vehicle = self.vehicles[vehicle_id]
            vehicle.status = "IDLE"
            vehicle.current_occupancy = 0
            vehicle.scheduled_stops = []
            vehicle.last_edge = self.buron_base
            
            print(f"차량 {vehicle_id} 재배치 완료")
        except traci.exceptions.TraCIException as e:
            print(f"차량 재배치 실패: {e}")

    def check_vehicle_existence(self, vehicle_id):
        try:
            traci.vehicle.getPosition(vehicle_id)
            return True
        except traci.exceptions.TraCIException:
            return False

    def add_request(self, origin, destination):
        self.metrics.total_requests += 1
        num_passengers = random.randint(1, 4)
        request_id = f"req_{self.request_counter}"
        self.request_counter += 1
        
        request = DRTRequest(request_id, origin, destination, num_passengers)
        self.requests[request_id] = request
        
        # 직선 거리 계산
        try:
            route = traci.simulation.findRoute(origin, destination)
            self.metrics.total_direct_distance += route.length
        except traci.exceptions.TraCIException:
            pass
        
        self.find_available_vehicle(request_id)
        return request_id

    def find_available_vehicle(self, request_id):
        request = self.requests[request_id]
        available_vehicles = []
        
        for vehicle_id, vehicle in self.vehicles.items():
            if not vehicle.active:
                continue
            
            if vehicle.can_accept_passengers(request.num_passengers):
                try:
                    current_edge = traci.vehicle.getRoadID(vehicle_id)
                    if current_edge == '':
                        current_edge = vehicle.last_edge
                    
                    if vehicle.status in ["IDLE", "PICKUP", "DROPOFF"]:
                        # 현재 위치에서 요청 지점까지의 거리 계산
                        distance = self.calculate_edge_distance(current_edge, request.origin)
                        
                        # 1km 이내인 경우에만 합승 고려
                        if distance <= 1000 or vehicle.status == "IDLE":
                            route = self.validate_and_find_route(current_edge, request.origin)
                            if route and route.edges:
                                available_vehicles.append((vehicle_id, vehicle, route.length))
                
                except traci.exceptions.TraCIException as e:
                    continue
        
        if not available_vehicles:
            if request not in self.waiting_requests:
                self.waiting_requests.append(request)
            return None
        
        best_vehicle = min(available_vehicles, key=lambda x: x[2])
        if self.assign_request_to_vehicle(best_vehicle[0], request_id):
            return best_vehicle[0]
        
        return None

    

    def assign_request_to_vehicle(self, vehicle_id, request_id):
        try:
            request = self.requests[request_id]
            vehicle = self.vehicles[vehicle_id]
            current_edge = traci.vehicle.getRoadID(vehicle_id) or vehicle.last_edge
            
            # 기존 정차 지점이 있는 경우 최적화
            if vehicle.scheduled_stops:
                optimized_stops = self.optimize_stops(vehicle, request)
                vehicle.scheduled_stops = optimized_stops
                
                # 최적화된 경로 생성
                route_edges = []
                current_pos = current_edge
                
                for location, _, _ in optimized_stops:
                    route = self.validate_and_find_route(current_pos, location)
                    if not route or not route.edges:
                        return False
                    route_edges.extend(route.edges if current_pos == current_edge else route.edges[1:])
                    current_pos = location
                
                traci.vehicle.setRoute(vehicle_id, route_edges)
            else:
                # 새로운 요청에 대한 단순 경로
                pickup_route = self.validate_and_find_route(current_edge, request.origin)
                if not pickup_route:
                    return False
                    
                dropoff_route = self.validate_and_find_route(request.origin, request.destination)
                if not dropoff_route:
                    return False
                
                complete_route = pickup_route.edges + dropoff_route.edges[1:]
                traci.vehicle.setRoute(vehicle_id, complete_route)
                vehicle.scheduled_stops = [(request.origin, "PICKUP", request_id),
                                         (request.destination, "DROPOFF", request_id)]
            
            request.assigned_vehicle = vehicle_id
            request.status = "ASSIGNED"
            
            if vehicle.status == "IDLE":
                vehicle.status = "PICKUP"
                self.metrics.shared_rides += 1
            
            return True
            
        except traci.exceptions.TraCIException as e:
            print(f"[ERROR] 요청 할당 중 오류: {e}")
            return False

          

    def update_vehicles(self):
        current_time = traci.simulation.getTime()
        
        for vehicle_id, vehicle in self.vehicles.items():
            if not vehicle.active:
                continue
            
            try:
                # 차량이 존재하지 않는 경우 리셋
                if not self.check_vehicle_existence(vehicle_id):
                    self.reset_vehicle(vehicle_id)
                    continue
                
                # 현재 도로 ID 업데이트
                current_edge = traci.vehicle.getRoadID(vehicle_id)
                if current_edge != '':
                    vehicle.last_edge = current_edge

                # 부론면 기지에 도착한 경우
                if current_edge == self.buron_base:
                    if vehicle.status == "RETURN":
                        vehicle.status = "IDLE"
                        vehicle.scheduled_stops = []
                        traci.vehicle.setColor(vehicle_id, (255, 255, 255))
                        print(f"차량 {vehicle_id}가 부론면에서 대기 중")
                        
                        # 대기 중인 요청 처리
                        if self.waiting_requests:
                            request = self.waiting_requests.pop(0)
                            self.find_available_vehicle(request.id)
                    continue

                # 정차 지점 처리
                if vehicle.scheduled_stops:
                    next_stop, action, request_id = vehicle.scheduled_stops[0]
                    if current_edge == next_stop:
                        request = self.requests[request_id]
                        
                        if action == "PICKUP":
                            vehicle.current_occupancy += request.num_passengers
                            request.status = "ONBOARD"
                            request.pickup_time = traci.simulation.getTime()
                            print(f"차량 {vehicle_id}가 승객 {request.num_passengers}명을 픽업함 (현재 탑승: {vehicle.current_occupancy}명)")
                            traci.vehicle.setColor(vehicle_id, (0, 255, 0))
                            vehicle.status = "DROPOFF"

                        elif action == "DROPOFF":
                            vehicle.current_occupancy -= request.num_passengers
                            request.status = "COMPLETED"
                            request.dropoff_time = traci.simulation.getTime()
                            self.completed_requests.append(request_id)
                            print(f"차량 {vehicle_id}가 승객을 목적지에 하차시킴 (현재 탑승: {vehicle.current_occupancy}명)")
                            
                            # 부론면으로 귀환
                            try:
                                return_route = traci.simulation.findRoute(current_edge, self.buron_base)
                                if return_route.edges:
                                    traci.vehicle.setRoute(vehicle_id, return_route.edges)
                                    vehicle.status = "RETURN"
                                    print(f"차량 {vehicle_id}가 부론면으로 귀환 중")
                                    traci.vehicle.setColor(vehicle_id, (255, 255, 0))
                            except traci.exceptions.TraCIException:
                                self.reset_vehicle(vehicle_id)

                        vehicle.scheduled_stops.pop(0)

                # 차량 운행 시간 측정
                if vehicle.status != "IDLE":
                    self.metrics.total_vehicle_hours += 1  # 1초 단위
                    
                    # 승객 탑승 중일 때
                    if vehicle.current_occupancy > 0:
                        self.metrics.total_occupied_hours += 1
                    
                    # 이동 거리 측정
                    try:
                        distance = traci.vehicle.getDistance(vehicle_id)
                        self.metrics.total_actual_distance += distance
                        
                        # 공차 거리 측정
                        if vehicle.current_occupancy == 0:
                            self.metrics.total_empty_distance += distance
                    except:
                        pass

            except traci.exceptions.TraCIException as e:
                print(f"Error in update_vehicles: {e}")
                continue

        # 대기 시간과 이동 시간 업데이트
        for request in self.requests.values():
            if request.status == "WAITING":
                self.metrics.total_wait_time += 1
            elif request.status == "ONBOARD":
                self.metrics.total_travel_time += 1

    def get_statistics(self):
        stats = {
            "총 요청 수": self.request_counter,
            "완료된 요청 수": len(self.completed_requests),
            "거절된 요청 수": len(self.rejected_requests),
            "대기 중인 요청 수": len(self.waiting_requests),
        }
        return stats

    def get_detailed_statistics(self):
        stats = self.get_statistics()
        metrics = self.metrics.calculate_metrics()
        return {
            "기본 통계": stats,
            "효과성 분석": metrics
        }

def generate_passenger_request():
    # 출발지와 목적지 정의
    origins = ["-1006685487", "-1013458887"]  # 부론면, 흥원면
    destinations = ["-1010175240", "-1060515905", "-1021870413"]  # 문막읍, 소초면, 호저면
    return random.choice(origins), random.choice(destinations)

def run_simulation():
    sumo_binary = "sumo-gui"
    sumo_cmd = [sumo_binary, "-c", "config/wonju.sumocfg"]

    try:
        traci.start(sumo_cmd)
        print("시뮬레이션 시작")

        drt_system = DRTSystem()

        # 2대의 차량 추가
        for i in range(2):
            drt_system.add_vehicle(f"drt_{i}")

        step = 0
        request_interval = 200  # 요청 간격 (초)
        next_request_time = request_interval  # 첫 요청 시간
        remaining_passengers = 122  # 총 승객 수

        while step < 10000:  # 1시간 시뮬레이션
            traci.simulationStep()

            # 새로운 승객 요청 생성
            if step >= next_request_time and remaining_passengers > 0:
                print(f"\n시뮬레이션 시간: {step}초")
                origin, destination = generate_passenger_request()
                num_passengers = min(remaining_passengers, random.randint(1, 4))  # 남은 승객 수에 따라 요청 승객 수 조정
                request_id = drt_system.add_request(origin, destination)
                drt_system.requests[request_id].num_passengers = num_passengers  # 승객 수 설정
                print(f"새로운 승객 요청: {origin} -> {destination}, 승객 {num_passengers}명")
                
                # 남은 승객 수 갱신
                remaining_passengers -= num_passengers
                
                # 다음 요청 시간 설정
                next_request_time += request_interval

            drt_system.update_vehicles()
            step += 1

        print("\n=== 시뮬레이션 결과 ===")
        detailed_stats = drt_system.get_detailed_statistics()
        
        for category, values in detailed_stats.items():
            print(f"\n{category}:")
            if isinstance(values, dict):
                for key, value in values.items():
                    if isinstance(value, dict):
                        print(f"  {key}:")
                        for subkey, subvalue in value.items():
                            if isinstance(subvalue, float):
                                print(f"    {subkey}: {subvalue:.2f}")
                            else:
                                print(f"    {subkey}: {subvalue}")
                    else:
                        if isinstance(value, float):
                            print(f"  {key}: {value:.2f}")
                        else:
                            print(f"  {key}: {value}")

        traci.close()
        print("\n시뮬레이션 완료")

    except Exception as e:
        print(f"오류 발생: {e}")
        if 'traci' in sys.modules:
            traci.close()

if __name__ == "__main__":
    run_simulation()
